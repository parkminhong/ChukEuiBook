<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>축의금 관리 장부 (Wedding Gift Manager)</title>
    <!-- Tailwind CSS CDN -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Chart.js CDN -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <!-- Google Fonts: Inter -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&family=Noto+Sans+KR:wght@400;500;700&display=swap" rel="stylesheet">
    <script>
        // Tailwind CSS 다크 모드 설정
        tailwind.config = {
            darkMode: 'class',
        }
    </script>
    <style>
        /* 기본 폰트 설정 */
        body {
            font-family: 'Inter', 'Noto Sans KR', sans-serif;
        }
        /* 테이블 컨테이너 높이 조정 */
        .table-container {
            max-height: 45vh; /* 높이 줄임 */
            overflow-y: auto;
        }
        /* 스크롤바 디자인 */
        .table-container::-webkit-scrollbar { width: 8px; }
        .table-container::-webkit-scrollbar-track { background: #f1f1f1; }
        .dark .table-container::-webkit-scrollbar-track { background: #2d3748; }
        .table-container::-webkit-scrollbar-thumb { background: #888; border-radius: 4px; }
        .dark .table-container::-webkit-scrollbar-thumb { background: #4a5568; }
        .table-container::-webkit-scrollbar-thumb:hover { background: #555; }
        /* 버튼 클릭 시 효과 */
        .action-btn:active {
            transform: scale(0.95);
        }
        /* 블러 처리 스타일 */
        .blurred-content {
            filter: blur(8px);
            transition: filter 0.3s ease-in-out;
            user-select: none;
            pointer-events: none;
        }
        /* 버튼 비활성화 스타일 */
        button:disabled {
            background-color: #9ca3af;
            cursor: not-allowed;
        }
        button:disabled:hover {
            background-color: #9ca3af;
        }
        /* 관계 아이콘 선택 스타일 */
        .relationship-btn.selected {
            background-color: #4f46e5; /* indigo-600 */
            color: white;
            border-color: #4f46e5;
        }
        .dark .relationship-btn.selected {
            background-color: #6366f1; /* indigo-500 */
            border-color: #6366f1;
        }
    </style>
</head>
<body class="bg-gray-50 dark:bg-gray-900 text-gray-800 dark:text-gray-200 transition-colors duration-300">

    <div class="container mx-auto p-4 md:p-8 max-w-7xl">
        
        <!-- 헤더 -->
        <header class="text-center mb-8 relative">
            <h1 data-i18n="mainTitle" class="text-3xl md:text-4xl font-bold text-gray-900 dark:text-white">축의금 관리 장부</h1>
            <p class="text-gray-600 dark:text-gray-400 mt-2">Wedding Gift Manager</p>
            
            <!-- 설정: 언어, 다크모드 -->
            <div class="absolute top-0 right-0 flex items-center space-x-4">
                <select id="language-switcher" class="bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-md px-2 py-1 text-sm focus:outline-none focus:ring-2 focus:ring-indigo-500">
                    <option value="ko">🇰🇷 한국어</option>
                    <option value="en">🇺🇸 English</option>
                </select>
                <button id="theme-toggle" class="p-2 rounded-full text-gray-500 dark:text-gray-400 hover:bg-gray-200 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                    <svg id="theme-icon-light" xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z" /></svg>
                    <svg id="theme-icon-dark" xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 hidden" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z" /></svg>
                </button>
            </div>
        </header>

        <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
            
            <!-- 왼쪽: 입력 폼 -->
            <div class="lg:col-span-1">
                <div class="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-md sticky top-8">
                    <h2 data-i18n="addGuestTitle" class="text-xl font-semibold mb-4 border-b dark:border-gray-600 pb-2">하객 정보 추가</h2>
                    <form id="guest-form" class="space-y-4">
                        <div>
                            <label for="name" data-i18n="nameLabel" class="block text-sm font-medium text-gray-700 dark:text-gray-300">이름</label>
                            <input type="text" id="name" name="name" required class="mt-1 block w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm placeholder-gray-400 dark:placeholder-gray-500 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                        </div>
                        
                        <div>
                            <label data-i18n="amountLabel" class="block text-sm font-medium text-gray-700 dark:text-gray-300">금액</label>
                            <div class="mt-1 p-3 bg-gray-100 dark:bg-gray-700 rounded-md text-center">
                                <span id="current-amount-display" class="text-2xl font-bold text-indigo-600 dark:text-indigo-400">0 원</span>
                            </div>
                            <div class="grid grid-cols-3 gap-2 mt-2">
                                <button type="button" data-amount="10000" class="action-btn amount-btn col-span-1 bg-blue-500 text-white py-2 rounded-md hover:bg-blue-600 transition-all" data-i18n-plus="plus" data-i18n-value="10k">+ 1만원</button>
                                <button type="button" data-amount="50000" class="action-btn amount-btn col-span-1 bg-green-500 text-white py-2 rounded-md hover:bg-green-600 transition-all" data-i18n-plus="plus" data-i18n-value="50k">+ 5만원</button>
                                <button type="button" id="reset-amount-btn" data-i18n="reset" class="action-btn col-span-1 bg-gray-400 dark:bg-gray-600 text-white py-2 rounded-md hover:bg-gray-500 dark:hover:bg-gray-500 transition-all">초기화</button>
                            </div>
                        </div>

                        <div>
                             <label for="side" data-i18n="sideLabel" class="block text-sm font-medium text-gray-700 dark:text-gray-300">구분</label>
                             <select id="side" name="side" required class="mt-1 block w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                                 <option data-i18n="groom" value="신랑">신랑</option>
                                 <option data-i18n="bride" value="신부">신부</option>
                             </select>
                        </div>
                        
                        <div>
                            <label data-i18n="relationshipLabel" class="block text-sm font-medium text-gray-700 dark:text-gray-300">관계</label>
                            <div id="relationship-icons" class="grid grid-cols-4 gap-2 mt-1">
                                <button type="button" data-relationship="친구" class="relationship-btn action-btn flex flex-col items-center p-2 border dark:border-gray-600 rounded-md transition-colors">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 mb-1" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M15 21a6 6 0 00-9-5.197M15 21a6 6 0 006-6v-1a6 6 0 00-9-5.197" /></svg>
                                    <span data-i18n="friend" class="text-xs">친구</span>
                                </button>
                                <button type="button" data-relationship="직장" class="relationship-btn action-btn flex flex-col items-center p-2 border dark:border-gray-600 rounded-md transition-colors">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 mb-1" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 13.255A23.931 23.931 0 0112 15c-3.183 0-6.22-.62-9-1.745M16 6V4a2 2 0 00-2-2h-4a2 2 0 00-2 2v2m4 6h.01M5 21h14a2 2 0 002-2v-7a2 2 0 00-2-2H5a2 2 0 00-2 2v7a2 2 0 002 2z" /></svg>
                                    <span data-i18n="work" class="text-xs">직장</span>
                                </button>
                                <button type="button" data-relationship="가족/친척" class="relationship-btn action-btn flex flex-col items-center p-2 border dark:border-gray-600 rounded-md transition-colors">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 mb-1" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" /></svg>
                                    <span data-i18n="family" class="text-xs">가족</span>
                                </button>
                                <button type="button" data-relationship="지인/기타" class="relationship-btn action-btn flex flex-col items-center p-2 border dark:border-gray-600 rounded-md transition-colors">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 mb-1" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" /></svg>
                                    <span data-i18n="other" class="text-xs">기타</span>
                                </button>
                            </div>
                        </div>
                        
                        <div>
                            <label data-i18n="ticketsLabel" class="block text-sm font-medium text-gray-700 dark:text-gray-300">불출 식권 수</label>
                             <div class="mt-1 p-3 bg-gray-100 dark:bg-gray-700 rounded-md text-center">
                                <span id="current-tickets-display" class="text-2xl font-bold text-teal-600 dark:text-teal-400">0 장</span>
                            </div>
                            <div class="grid grid-cols-3 gap-2 mt-2">
                                <button type="button" data-tickets="1" class="action-btn ticket-btn col-span-1 bg-teal-500 text-white py-2 rounded-md hover:bg-teal-600 transition-all" data-i18n-plus="plus" data-i18n-value="1t">+ 1장</button>
                                <button type="button" data-tickets="2" class="action-btn ticket-btn col-span-1 bg-teal-500 text-white py-2 rounded-md hover:bg-teal-600 transition-all" data-i18n-plus="plus" data-i18n-value="2t">+ 2장</button>
                                <button type="button" id="reset-tickets-btn" data-i18n="reset" class="action-btn col-span-1 bg-gray-400 dark:bg-gray-600 text-white py-2 rounded-md hover:bg-gray-500 dark:hover:bg-gray-500 transition-all">초기화</button>
                            </div>
                        </div>

                        <div>
                            <label for="memo" data-i18n="memoLabel" class="block text-sm font-medium text-gray-700 dark:text-gray-300">메모</label>
                            <input type="text" id="memo" name="memo" class="mt-1 block w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm placeholder-gray-400 dark:placeholder-gray-500 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                        </div>
                        <button type="submit" id="add-guest-btn" data-i18n="addGuestBtn" class="w-full bg-indigo-600 text-white font-bold py-3 px-4 rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-colors text-lg">
                            추가하기
                        </button>
                    </form>
                </div>
            </div>

            <!-- 오른쪽: 목록, 통계, 그래프 -->
            <div class="lg:col-span-2 space-y-8">
                <!-- 하객 목록 -->
                <div class="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-md">
                    <div class="flex flex-col md:flex-row justify-between items-center mb-4 gap-4">
                        <h2 data-i18n="guestListTitle" class="text-xl font-semibold">하객 목록</h2>
                        <div class="flex items-center gap-2 w-full md:w-auto">
                            <input type="search" id="search-box" class="block w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm placeholder-gray-400 dark:placeholder-gray-500 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                            <button id="export-csv" title="엑셀(CSV) 파일로 내보내기" class="flex-shrink-0 bg-green-600 text-white p-2 rounded-md hover:bg-green-700 transition-colors">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM6.293 6.707a1 1 0 010-1.414l3-3a1 1 0 011.414 0l3 3a1 1 0 01-1.414 1.414L11 5.414V13a1 1 0 11-2 0V5.414L7.707 6.707a1 1 0 01-1.414 0z" clip-rule="evenodd" /></svg>
                            </button>
                        </div>
                    </div>
                    
                    <div id="filter-buttons" class="flex space-x-2 mb-4 border-b dark:border-gray-600 pb-2">
                        <button data-filter="all" data-i18n="filterAll" class="filter-btn bg-indigo-600 text-white px-3 py-1 text-sm rounded-full">전체</button>
                        <button data-filter="groom" data-i18n="filterGroom" class="filter-btn bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 px-3 py-1 text-sm rounded-full">신랑측</button>
                        <button data-filter="bride" data-i18n="filterBride" class="filter-btn bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 px-3 py-1 text-sm rounded-full">신부측</button>
                    </div>

                    <div class="table-container">
                        <table class="w-full text-sm text-left text-gray-500 dark:text-gray-400">
                            <thead class="text-xs text-gray-700 dark:text-gray-400 uppercase bg-gray-100 dark:bg-gray-700 sticky top-0">
                                <tr>
                                    <th data-i18n="thSide" scope="col" class="px-4 py-3">구분</th>
                                    <th data-i18n="thName" scope="col" class="px-4 py-3">이름</th>
                                    <th data-i18n="thAmount" scope="col" class="px-4 py-3">금액</th>
                                    <th data-i18n="thRelationship" scope="col" class="px-4 py-3">관계</th>
                                    <th data-i18n="thTickets" scope="col" class="px-4 py-3">식권</th>
                                    <th data-i18n="thTime" scope="col" class="px-4 py-3">입력시간</th>
                                    <th data-i18n="thManage" scope="col" class="px-4 py-3 text-center">관리</th>
                                </tr>
                            </thead>
                            <tbody id="guest-list" class="divide-y dark:divide-gray-700"></tbody>
                        </table>
                    </div>
                    <p id="empty-message" class="text-center text-gray-500 dark:text-gray-400 py-10"></p>
                </div>
                
                <!-- 통계, 식권, 그래프 -->
                <div class="grid grid-cols-1 md:grid-cols-3 gap-8">
                    <div id="summary" class="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-md">
                        <div class="flex justify-between items-center mb-4 border-b dark:border-gray-600 pb-2">
                            <h2 data-i18n="summaryTitle" class="text-xl font-semibold">종합 현황</h2>
                            <button id="toggle-summary-blur" title="현황 가리기/보기" class="text-gray-500 dark:text-gray-400 hover:text-gray-800 dark:hover:text-white transition-colors">
                                <svg id="summary-eye-open" xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path stroke-linecap="round" stroke-linejoin="round" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" /><path stroke-linecap="round" stroke-linejoin="round" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" /></svg>
                                <svg id="summary-eye-closed" xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 hidden" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path stroke-linecap="round" stroke-linejoin="round" d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.88 9.88l-3.29-3.29m7.532 7.532l3.29 3.29M3 3l3.59 3.59m0 0A9.953 9.953 0 0112 5c4.478 0 8.268 2.943 9.543 7a10.025 10.025 0 01-4.132 5.411m0 0L21 21" /></svg>
                            </button>
                        </div>
                        <div id="summary-content" class="space-y-3 text-gray-700 dark:text-gray-300">
                            <div class="flex justify-between items-center"><span data-i18n="totalGuests" class="font-medium">총 하객 수:</span><span id="total-guests" class="font-bold text-lg text-indigo-600 dark:text-indigo-400">0 명</span></div>
                            <div class="flex justify-between items-center"><span data-i18n="totalAmount" class="font-medium">총 축의금:</span><span id="total-amount" class="font-bold text-lg text-indigo-600 dark:text-indigo-400">0 원</span></div>
                            <hr class="my-2 dark:border-gray-600">
                            <div class="flex justify-between items-center"><span data-i18n="groomTotal" class="font-medium">신랑측 총액:</span><span id="groom-total" class="font-semibold">0 원</span></div>
                            <div class="flex justify-between items-center"><span data-i18n="brideTotal" class="font-medium">신부측 총액:</span><span id="bride-total" class="font-semibold">0 원</span></div>
                        </div>
                    </div>
                    <div class="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-md">
                        <h2 data-i18n="ticketStatusTitle" class="text-xl font-semibold mb-4 border-b dark:border-gray-600 pb-2">식권 현황</h2>
                        <div class="space-y-3">
                            <div>
                                <label for="guaranteed-headcount" data-i18n="guaranteedHeadcountLabel" class="block text-sm font-medium text-gray-700 dark:text-gray-300">보증 인원 설정</label>
                                <input type="number" id="guaranteed-headcount" min="0" class="mt-1 block w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm">
                            </div>
                            <div class="text-center pt-2">
                                <p data-i18n="totalTicketsIssuedLabel" class="text-gray-600 dark:text-gray-400">총 불출 식권</p>
                                <p id="total-tickets-issued" class="text-2xl font-bold text-teal-600 dark:text-teal-400">0 장</p>
                                <p id="headcount-status" class="text-sm font-medium mt-1">&nbsp;</p>
                            </div>
                        </div>
                    </div>
                    <div class="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-md">
                        <div class="flex justify-between items-center mb-4 border-b dark:border-gray-600 pb-2">
                            <h2 data-i18n="ratioTitle" class="text-xl font-semibold">비율</h2>
                             <button id="toggle-chart-blur" title="비율 가리기/보기" class="text-gray-500 dark:text-gray-400 hover:text-gray-800 dark:hover:text-white transition-colors">
                                <svg id="chart-eye-open" xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path stroke-linecap="round" stroke-linejoin="round" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" /><path stroke-linecap="round" stroke-linejoin="round" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" /></svg>
                                <svg id="chart-eye-closed" xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 hidden" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path stroke-linecap="round" stroke-linejoin="round" d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.88 9.88l-3.29-3.29m7.532 7.532l3.29 3.29M3 3l3.59 3.59m0 0A9.953 9.953 0 0112 5c4.478 0 8.268 2.943 9.543 7a10.025 10.025 0 01-4.132 5.411m0 0L21 21" /></svg>
                            </button>
                        </div>
                        <div id="chart-container" class="relative flex items-center justify-center" style="min-height: 180px;">
                            <canvas id="relationship-chart"></canvas>
                            <div id="chart-blur-overlay" class="absolute inset-0 bg-gray-900 hidden"></div>
                            <p id="chart-empty-message" class="text-center text-gray-500 dark:text-gray-400 hidden"></p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // --- i18n & THEME SETUP ---
            const translations = {
                ko: {
                    mainTitle: '축의금 관리 장부',
                    addGuestTitle: '하객 정보 추가',
                    nameLabel: '이름',
                    amountLabel: '금액',
                    sideLabel: '구분',
                    groom: '신랑',
                    bride: '신부',
                    relationshipLabel: '관계',
                    friend: '친구',
                    work: '직장',
                    family: '가족/친척',
                    other: '지인/기타',
                    ticketsLabel: '불출 식권 수',
                    memoLabel: '메모',
                    addGuestBtn: '추가하기',
                    guestListTitle: '하객 목록',
                    filterAll: '전체',
                    filterGroom: '신랑측',
                    filterBride: '신부측',
                    thSide: '구분',
                    thName: '이름',
                    thAmount: '금액',
                    thRelationship: '관계',
                    thTickets: '식권',
                    thTime: '입력시간',
                    thManage: '관리',
                    emptyMessage: '등록된 하객 정보가 없습니다.',
                    summaryTitle: '종합 현황',
                    totalGuests: '총 하객 수:',
                    totalAmount: '총 축의금:',
                    groomTotal: '신랑측 총액:',
                    brideTotal: '신부측 총액:',
                    ticketStatusTitle: '식권 현황',
                    guaranteedHeadcountLabel: '보증 인원 설정',
                    totalTicketsIssuedLabel: '총 불출 식권',
                    ratioTitle: '비율',
                    reset: '초기화',
                    plus10k: '+ 1만원',
                    plus50k: '+ 5만원',
                    plus1t: '+ 1장',
                    plus2t: '+ 2장',
                    ticketUnit: '장',
                    guestUnit: '명',
                    currencyUnit: '원',
                    headcountLeft: '명 남음',
                    headcountExceeded: '명 초과',
                    headcountMet: '보증 인원 충족',
                    chartGroom: '신랑측',
                    chartBride: '신부측',
                    chartNoData: '데이터가 없습니다.',
                    confirmDelete: '정말로 이 항목을 삭제하시겠습니까?',
                    amountIsZero: '금액이 0원입니다. 그대로 추가하시겠습니까?',
                    noDataToExport: '내보낼 데이터가 없습니다.',
                    delete: '삭제',
                    searchPlaceholder: '이름으로 검색...',
                    memoPlaceholder: '동반 하객, 특이사항 등',
                    headcountPlaceholder: '예: 200'
                },
                en: {
                    mainTitle: 'Wedding Gift Manager',
                    addGuestTitle: 'Add Guest Info',
                    nameLabel: 'Name',
                    amountLabel: 'Amount',
                    sideLabel: 'Side',
                    groom: 'Groom',
                    bride: 'Bride',
                    relationshipLabel: 'Relationship',
                    friend: 'Friend',
                    work: 'Work',
                    family: 'Family/Relative',
                    other: 'Acquaintance/Other',
                    ticketsLabel: 'Meal Tickets Issued',
                    memoLabel: 'Memo',
                    addGuestBtn: 'Add Guest',
                    guestListTitle: 'Guest List',
                    filterAll: 'All',
                    filterGroom: "Groom's Side",
                    filterBride: "Bride's Side",
                    thSide: 'Side',
                    thName: 'Name',
                    thAmount: 'Amount',
                    thRelationship: 'Relationship',
                    thTickets: 'Tickets',
                    thTime: 'Time',
                    thManage: 'Manage',
                    emptyMessage: 'No guest information registered.',
                    summaryTitle: 'Summary',
                    totalGuests: 'Total Guests:',
                    totalAmount: 'Total Gifts:',
                    groomTotal: "Groom's Total:",
                    brideTotal: "Bride's Total:",
                    ticketStatusTitle: 'Ticket Status',
                    guaranteedHeadcountLabel: 'Set Guaranteed Headcount',
                    totalTicketsIssuedLabel: 'Total Tickets Issued',
                    ratioTitle: 'Ratio',
                    reset: 'Reset',
                    plus10k: '+ 10k',
                    plus50k: '+ 50k',
                    plus1t: '+ 1',
                    plus2t: '+ 2',
                    ticketUnit: 'tickets',
                    guestUnit: 'guests',
                    currencyUnit: '',
                    headcountLeft: 'left',
                    headcountExceeded: 'exceeded',
                    headcountMet: 'Guaranteed headcount met',
                    chartGroom: "Groom's Side",
                    chartBride: "Bride's Side",
                    chartNoData: 'No data available.',
                    confirmDelete: 'Are you sure you want to delete this item?',
                    amountIsZero: 'The amount is 0. Add anyway?',
                    noDataToExport: 'There is no data to export.',
                    delete: 'Delete',
                    searchPlaceholder: 'Search by name...',
                    memoPlaceholder: 'e.g., accompanying guests',
                    headcountPlaceholder: 'e.g., 200'
                }
            };

            const relationshipTranslationMap = {
                '친구': 'friend',
                '직장': 'work',
                '가족/친척': 'family',
                '지인/기타': 'other'
            };

            const languageSwitcher = document.getElementById('language-switcher');
            const themeToggle = document.getElementById('theme-toggle');
            const themeIconLight = document.getElementById('theme-icon-light');
            const themeIconDark = document.getElementById('theme-icon-dark');
            
            let currentLang = localStorage.getItem('language') || 'ko';

            const setLanguage = (lang) => {
                currentLang = lang;
                localStorage.setItem('language', lang);
                document.documentElement.lang = lang;
                languageSwitcher.value = lang;

                document.querySelectorAll('[data-i18n]').forEach(el => {
                    const key = el.dataset.i18n;
                    if (translations[lang][key]) {
                        el.textContent = translations[lang][key];
                    }
                });
                
                // For buttons with combined text
                document.querySelectorAll('[data-i18n-plus]').forEach(el => {
                    const plusKey = el.dataset.i18nPlus;
                    const valueKey = el.dataset.i18nValue;
                    el.textContent = `${translations[lang][plusKey]} ${translations[lang][valueKey]}`;
                });

                // For placeholders
                document.getElementById('search-box').placeholder = translations[lang].searchPlaceholder;
                document.getElementById('memo').placeholder = translations[lang].memoPlaceholder;
                document.getElementById('guaranteed-headcount').placeholder = translations[lang].headcountPlaceholder;

                // Re-render to apply language changes to dynamic content
                render();
            };

            const setTheme = (theme) => {
                localStorage.setItem('theme', theme);
                if (theme === 'dark') {
                    document.documentElement.classList.add('dark');
                    themeIconLight.classList.add('hidden');
                    themeIconDark.classList.remove('hidden');
                } else {
                    document.documentElement.classList.remove('dark');
                    themeIconLight.classList.remove('hidden');
                    themeIconDark.classList.add('hidden');
                }
                // Re-render chart with new theme colors
                renderChart();
            };

            languageSwitcher.addEventListener('change', (e) => setLanguage(e.target.value));
            themeToggle.addEventListener('click', () => {
                const newTheme = localStorage.getItem('theme') === 'dark' ? 'light' : 'dark';
                setTheme(newTheme);
            });

            // --- DOM & STATE ---
            const guestForm = document.getElementById('guest-form');
            const guestList = document.getElementById('guest-list');
            const searchBox = document.getElementById('search-box');
            const filterButtons = document.getElementById('filter-buttons');
            const exportCsvButton = document.getElementById('export-csv');
            const emptyMessage = document.getElementById('empty-message');
            const currentAmountDisplay = document.getElementById('current-amount-display');
            const addGuestBtn = document.getElementById('add-guest-btn');
            const nameInput = document.getElementById('name');
            const currentTicketsDisplay = document.getElementById('current-tickets-display');
            const summaryContent = document.getElementById('summary-content');
            const toggleSummaryBlurBtn = document.getElementById('toggle-summary-blur');
            const summaryEyeOpen = document.getElementById('summary-eye-open');
            const summaryEyeClosed = document.getElementById('summary-eye-closed');
            const guaranteedHeadcountInput = document.getElementById('guaranteed-headcount');
            const totalTicketsIssuedDisplay = document.getElementById('total-tickets-issued');
            const headcountStatusDisplay = document.getElementById('headcount-status');
            const chartCanvas = document.getElementById('relationship-chart');
            const chartBlurOverlay = document.getElementById('chart-blur-overlay');
            const chartEmptyMessage = document.getElementById('chart-empty-message');
            const toggleChartBlurBtn = document.getElementById('toggle-chart-blur');
            const chartEyeOpen = document.getElementById('chart-eye-open');
            const chartEyeClosed = document.getElementById('chart-eye-closed');

            let guests = [];
            let guaranteedHeadcount = 0;
            let currentAmount = 0;
            let currentTickets = 0;
            let currentRelationship = '';
            let currentFilter = 'all';
            let searchTerm = '';
            let isSummaryBlurred = false;
            let isChartBlurred = false;
            let chartInstance = null;
            
            const GUEST_DATA_KEY = 'weddingGiftManagerData_v6';
            const HEADCOUNT_KEY = 'weddingGiftManagerHeadcount_v6';
            const SUMMARY_BLUR_KEY = 'weddingGiftManagerSummaryBlurState_v6';
            const CHART_BLUR_KEY = 'weddingGiftManagerChartBlurState_v6';

            // --- DATA ---
            const loadData = () => {
                const savedGuests = localStorage.getItem(GUEST_DATA_KEY);
                if (savedGuests) guests = JSON.parse(savedGuests);
                const savedHeadcount = localStorage.getItem(HEADCOUNT_KEY);
                if (savedHeadcount) guaranteedHeadcount = parseInt(savedHeadcount, 10);
                isSummaryBlurred = localStorage.getItem(SUMMARY_BLUR_KEY) === 'true';
                isChartBlurred = localStorage.getItem(CHART_BLUR_KEY) === 'true';
            };

            const saveData = () => {
                localStorage.setItem(GUEST_DATA_KEY, JSON.stringify(guests));
                localStorage.setItem(HEADCOUNT_KEY, guaranteedHeadcount);
                localStorage.setItem(SUMMARY_BLUR_KEY, isSummaryBlurred);
                localStorage.setItem(CHART_BLUR_KEY, isChartBlurred);
            };

            // --- RENDER ---
            const formatTimestamp = (isoString) => {
                if (!isoString) return '';
                const date = new Date(isoString);
                return date.toLocaleString(currentLang === 'ko' ? 'ko-KR' : 'en-US', { year: '2-digit', month: '2-digit', day: '2-digit', hour: '2-digit', minute: '2-digit', hour12: false });
            };
            
            const renderChart = () => {
                const groomTotal = guests.filter(g => g.side === translations.ko.groom).reduce((sum, g) => sum + Number(g.amount), 0);
                const brideTotal = guests.filter(g => g.side === translations.ko.bride).reduce((sum, g) => sum + Number(g.amount), 0);

                if (chartInstance) chartInstance.destroy();
                
                const noData = groomTotal === 0 && brideTotal === 0;
                chartCanvas.classList.toggle('hidden', noData);
                chartEmptyMessage.classList.toggle('hidden', !noData);

                if (noData) return;
                
                const isDark = document.documentElement.classList.contains('dark');
                Chart.defaults.color = isDark ? '#e5e7eb' : '#4b5563';

                chartInstance = new Chart(chartCanvas.getContext('2d'), {
                    type: 'doughnut',
                    data: {
                        labels: [translations[currentLang].chartGroom, translations[currentLang].chartBride],
                        datasets: [{ data: [groomTotal, brideTotal], backgroundColor: ['#3b82f6', '#ec4899'], borderColor: [isDark ? '#1f2937' : '#ffffff'], borderWidth: 2 }]
                    },
                    options: {
                        responsive: true, maintainAspectRatio: false,
                        plugins: {
                            legend: { position: 'bottom', labels: { color: isDark ? '#e5e7eb' : '#4b5563' } },
                            tooltip: { 
                                bodyColor: isDark ? '#e5e7eb' : '#4b5563',
                                titleColor: isDark ? '#e5e7eb' : '#4b5563',
                                callbacks: { label: (c) => `${c.label || ''}: ${new Intl.NumberFormat(currentLang === 'ko' ? 'ko-KR' : 'en-US').format(c.parsed)} ${translations[currentLang].currencyUnit}` } 
                            }
                        }
                    }
                });
            };
            
            const render = () => {
                let filteredGuests = [...guests];
                const groomSideText = translations.ko.groom;
                const brideSideText = translations.ko.bride;

                if (currentFilter === 'groom') filteredGuests = filteredGuests.filter(g => g.side === groomSideText);
                else if (currentFilter === 'bride') filteredGuests = filteredGuests.filter(g => g.side === brideSideText);
                if (searchTerm) filteredGuests = filteredGuests.filter(g => g.name.toLowerCase().includes(searchTerm.toLowerCase()));

                guestList.innerHTML = '';
                const showEmpty = filteredGuests.length === 0;
                emptyMessage.classList.toggle('hidden', !showEmpty);
                guestList.classList.toggle('hidden', showEmpty);

                if (!showEmpty) {
                    // Sort by timestamp descending
                    filteredGuests.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));
                    filteredGuests.forEach(guest => {
                        const tr = document.createElement('tr');
                        tr.className = 'bg-white dark:bg-gray-800 hover:bg-gray-50 dark:hover:bg-gray-700';
                        const relationshipKey = relationshipTranslationMap[guest.relationship] || 'other';
                        tr.innerHTML = `
                            <td class="px-4 py-3"><span class="px-2 py-1 text-xs font-semibold rounded-full ${guest.side === groomSideText ? 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200' : 'bg-pink-100 text-pink-800 dark:bg-pink-900 dark:text-pink-200'}">${translations[currentLang][guest.side === groomSideText ? 'groom' : 'bride']}</span></td>
                            <td class="px-4 py-3 font-medium text-gray-900 dark:text-white whitespace-nowrap">${guest.name}</td>
                            <td class="px-4 py-3">${Number(guest.amount).toLocaleString(currentLang === 'ko' ? 'ko-KR' : 'en-US')} ${translations[currentLang].currencyUnit}</td>
                            <td class="px-4 py-3">${translations[currentLang][relationshipKey]}</td>
                            <td class="px-4 py-3 text-center">${guest.tickets}</td>
                            <td class="px-4 py-3 text-gray-500 dark:text-gray-400 text-xs">${formatTimestamp(guest.timestamp)}</td>
                            <td class="px-4 py-3 text-center">
                                <button data-id="${guest.id}" class="delete-btn text-red-500 hover:text-red-700 font-medium">${translations[currentLang].delete}</button>
                            </td>
                        `;
                        guestList.appendChild(tr);
                    });
                }
                updateSummaryAndTickets();
                updateFilterButtons();
                renderChart();
            };
            
            const updateSummaryAndTickets = () => {
                const totalGuests = guests.length;
                const totalAmount = guests.reduce((sum, g) => sum + Number(g.amount), 0);
                const groomTotal = guests.filter(g => g.side === translations.ko.groom).reduce((sum, g) => sum + Number(g.amount), 0);
                const brideTotal = guests.filter(g => g.side === translations.ko.bride).reduce((sum, g) => sum + Number(g.amount), 0);
                const totalTickets = guests.reduce((sum, g) => sum + Number(g.tickets), 0);

                document.getElementById('total-guests').textContent = `${totalGuests.toLocaleString()} ${translations[currentLang].guestUnit}`;
                document.getElementById('total-amount').textContent = `${totalAmount.toLocaleString()} ${translations[currentLang].currencyUnit}`;
                document.getElementById('groom-total').textContent = `${groomTotal.toLocaleString()} ${translations[currentLang].currencyUnit}`;
                document.getElementById('bride-total').textContent = `${brideTotal.toLocaleString()} ${translations[currentLang].currencyUnit}`;
                
                totalTicketsIssuedDisplay.textContent = `${totalTickets.toLocaleString()} ${translations[currentLang].ticketUnit}`;
                guaranteedHeadcountInput.value = guaranteedHeadcount > 0 ? guaranteedHeadcount : '';
                
                const remaining = guaranteedHeadcount - totalTickets;
                if (guaranteedHeadcount > 0) {
                    if (remaining > 0) {
                        headcountStatusDisplay.textContent = `${remaining} ${translations[currentLang].headcountLeft}`;
                        headcountStatusDisplay.className = 'text-sm font-medium mt-1 text-blue-600 dark:text-blue-400';
                    } else if (remaining < 0) {
                        headcountStatusDisplay.textContent = `${Math.abs(remaining)} ${translations[currentLang].headcountExceeded}`;
                        headcountStatusDisplay.className = 'text-sm font-medium mt-1 text-red-600 dark:text-red-400';
                    } else {
                        headcountStatusDisplay.textContent = translations[currentLang].headcountMet;
                        headcountStatusDisplay.className = 'text-sm font-medium mt-1 text-green-600 dark:text-green-400';
                    }
                } else {
                    headcountStatusDisplay.innerHTML = '&nbsp;';
                }
            };

            const updateFilterButtons = () => {
                document.querySelectorAll('.filter-btn').forEach(btn => {
                    const isActive = btn.dataset.filter === currentFilter;
                    btn.classList.toggle('bg-indigo-600', isActive);
                    btn.classList.toggle('text-white', isActive);
                    btn.classList.toggle('bg-gray-200', !isActive);
                    btn.classList.toggle('dark:bg-gray-700', !isActive);
                    btn.classList.toggle('text-gray-700', !isActive);
                    btn.classList.toggle('dark:text-gray-300', !isActive);
                });
            };

            const validateForm = () => {
                const nameValid = nameInput.value.trim() !== '';
                const relationshipValid = currentRelationship !== '';
                addGuestBtn.disabled = !(nameValid && relationshipValid);
            };

            const applyBlurStates = () => {
                summaryContent.classList.toggle('blurred-content', isSummaryBlurred);
                summaryEyeOpen.classList.toggle('hidden', isSummaryBlurred);
                summaryEyeClosed.classList.toggle('hidden', !isSummaryBlurred);
                
                chartBlurOverlay.classList.toggle('hidden', !isChartBlurred);
                chartEyeOpen.classList.toggle('hidden', isChartBlurred);
                chartEyeClosed.classList.toggle('hidden', !isChartBlurred);
            };

            // --- EVENT HANDLERS ---
            nameInput.addEventListener('input', validateForm);
            toggleSummaryBlurBtn.addEventListener('click', () => { isSummaryBlurred = !isSummaryBlurred; saveData(); applyBlurStates(); });
            toggleChartBlurBtn.addEventListener('click', () => { isChartBlurred = !isChartBlurred; saveData(); applyBlurStates(); });

            guestForm.addEventListener('click', (e) => {
                const target = e.target.closest('button');
                if (!target) return;

                if (target.classList.contains('amount-btn')) {
                    const amount = Number(target.dataset.amount);
                    if (amount > 0) {
                        currentAmount += amount;
                        currentAmountDisplay.textContent = `${currentAmount.toLocaleString()} ${translations[currentLang].currencyUnit}`;
                    }
                } else if (target.id === 'reset-amount-btn') {
                    currentAmount = 0;
                    currentAmountDisplay.textContent = `0 ${translations[currentLang].currencyUnit}`;
                } else if (target.classList.contains('ticket-btn')) {
                    const tickets = Number(target.dataset.tickets);
                    if (tickets > 0) {
                        currentTickets += tickets;
                        currentTicketsDisplay.textContent = `${currentTickets} ${translations[currentLang].ticketUnit}`;
                    }
                } else if (target.id === 'reset-tickets-btn') {
                    currentTickets = 0;
                    currentTicketsDisplay.textContent = `0 ${translations[currentLang].ticketUnit}`;
                } else if (target.classList.contains('relationship-btn')) {
                    document.querySelectorAll('.relationship-btn').forEach(btn => btn.classList.remove('selected'));
                    target.classList.add('selected');
                    currentRelationship = target.dataset.relationship;
                    validateForm();
                }
            });

            guestForm.addEventListener('submit', (e) => {
                e.preventDefault();
                if (addGuestBtn.disabled) return;
                if (currentAmount === 0 && !confirm(translations[currentLang].amountIsZero)) return;
                
                guests.unshift({
                    id: Date.now(), name: nameInput.value, amount: currentAmount,
                    side: document.getElementById('side').value, 
                    relationship: currentRelationship,
                    tickets: currentTickets,
                    memo: document.getElementById('memo').value, 
                    timestamp: new Date().toISOString()
                });
                saveData();
                render();
                
                guestForm.reset();
                currentAmount = 0;
                currentTickets = 0;
                currentRelationship = '';
                document.querySelectorAll('.relationship-btn').forEach(btn => btn.classList.remove('selected'));
                currentAmountDisplay.textContent = `0 ${translations[currentLang].currencyUnit}`;
                currentTicketsDisplay.textContent = `0 ${translations[currentLang].ticketUnit}`;
                validateForm();
            });
            
            guaranteedHeadcountInput.addEventListener('input', (e) => {
                guaranteedHeadcount = parseInt(e.target.value, 10) || 0;
                saveData();
                updateSummaryAndTickets();
            });

            guestList.addEventListener('click', (e) => {
                if (e.target.classList.contains('delete-btn')) {
                    const guestId = Number(e.target.dataset.id);
                    if (confirm(translations[currentLang].confirmDelete)) {
                        guests = guests.filter(g => g.id !== guestId);
                        saveData();
                        render();
                    }
                }
            });

            searchBox.addEventListener('input', (e) => { searchTerm = e.target.value; render(); });
            filterButtons.addEventListener('click', (e) => { if (e.target.tagName === 'BUTTON') { currentFilter = e.target.dataset.filter; render(); } });

            exportCsvButton.addEventListener('click', () => {
                if (guests.length === 0) { alert(translations[currentLang].noDataToExport); return; }
                const headers = ['구분', '이름', '금액', '관계', '식권 수', '메모', '입력시간'];
                const csvContent = [
                    headers.join(','),
                    ...guests.map(g => [ `"${g.side}"`, `"${g.name}"`, g.amount, `"${g.relationship}"`, g.tickets, `"${(g.memo || '').replace(/"/g, '""')}"`, `"${formatTimestamp(g.timestamp)}"` ].join(','))
                ].join('\n');
                
                const blob = new Blob(["\uFEFF" + csvContent], { type: 'text/csv;charset=utf-8;' });
                const link = document.createElement('a');
                const url = URL.createObjectURL(blob);
                link.setAttribute('href', url);
                const dateString = new Date().toISOString().slice(0,10).replace(/-/g,"");
                link.setAttribute('download', `축의금_장부_${dateString}.csv`);
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            });

            // --- INITIALIZATION ---
            loadData();
            const initialTheme = localStorage.getItem('theme') || (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');
            setTheme(initialTheme);
            setLanguage(currentLang);
            applyBlurStates();
            validateForm();
        });
    </script>

</body>
</html>
